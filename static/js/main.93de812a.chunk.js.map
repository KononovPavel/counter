{"version":3,"sources":["reportWebVitals.ts","Components/Button/Button.tsx","redux/reducers/counterReducer.ts","Components/Counter/Counter.tsx","Components/Settings/SettingsOfCounter.tsx","App.tsx","redux/state.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","props","className","onClick","callBack","disabled","nameButton","CHANGE_MAX_VALUE","CHANGE_START_VALUE","INCREMENT","RESET","SET","initialState","maxValue","startValue","currentValue","red","error","incDisable","resetDisable","setDisable","isFetching","incValueTC","dispatch","getState","type","setValueTC","localStorage","setItem","JSON","stringify","counter","Counter","state","useSelector","useDispatch","reset","SettingsOfCounter","useEffect","max","getItem","min","parse","setValueAC2","value","onChange","e","newValue","currentTarget","valueAsNumber","newMaxValue","newStartValue","App","setTimeout","is","src","alt","rootReducer","combineReducers","action","copyState","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93de812a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport './Button.css'\r\n\r\ntype ButtonPropsType ={\r\n    nameButton:string,\r\n    callBack: () => void,\r\n    disabled?:boolean | null\r\n}\r\n\r\nconst Button: React.FC<ButtonPropsType> = (props) => {\r\n    const click = ()=> props.callBack()\r\n\r\n    return (\r\n        <div>\r\n            <button className={\"btn\"} onClick={click} disabled={!!props.disabled}>{props.nameButton}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import {Dispatch} from \"redux\"\r\nimport {AppStateType} from \"../state\";\r\n\r\n\r\nconst CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE'\r\nconst CHANGE_START_VALUE = 'CHANGE_START_VALUE'\r\nconst INCREMENT = 'INCREMENT'\r\nconst RESET = 'RESET'\r\nconst SET = 'SET'\r\n\r\nlet initialState: initStateType = {\r\n    maxValue: 1,\r\n    startValue: 0,\r\n    currentValue: 0,\r\n    red: false,\r\n    error: false,\r\n    incDisable: true,\r\n    resetDisable: true,\r\n    setDisable: false,\r\n    isFetching: true\r\n}\r\n\r\nexport type initStateType = {\r\n    maxValue: number,\r\n    startValue: number,\r\n    currentValue: number,\r\n    setDisable: boolean,\r\n    incDisable: boolean,\r\n    resetDisable: boolean,\r\n    red: boolean,\r\n    error: boolean\r\n    isFetching: boolean\r\n}\r\ntype changeMaxValueActionType = {\r\n    type: typeof CHANGE_MAX_VALUE,\r\n    newMaxValue: number\r\n}\r\ntype changeStartValueActionType = {\r\n    type: typeof CHANGE_START_VALUE,\r\n    newStartValue: number\r\n}\r\ntype incValueType = {\r\n    type: typeof INCREMENT,\r\n}\r\ntype resetValueType = {\r\n    type: typeof RESET,\r\n}\r\ntype setAllValue = {\r\n    type: typeof SET\r\n}\r\ntype setValue = {\r\n    type: 'SET_VALUE',\r\n    max: number,\r\n    min: number\r\n}\r\ntype isFetchingType = {\r\n    type: 'IS_FETCHING',\r\n    is: boolean\r\n}\r\n\r\n\r\ntype actionType =\r\n    changeMaxValueActionType\r\n    | incValueType\r\n    | resetValueType\r\n    | changeStartValueActionType\r\n    | setAllValue\r\n    | setValue\r\n    | isFetchingType\r\n\r\n\r\nexport const counterReducer = (state: initStateType = initialState, action: actionType): initStateType => {\r\n    switch (action.type) {\r\n\r\n        case INCREMENT: {\r\n            let copyState = {...state}\r\n            copyState.red = false;\r\n            copyState.currentValue = copyState.currentValue + 1;\r\n            copyState.setDisable = true;\r\n            if (copyState.currentValue === copyState.maxValue) {\r\n                copyState.incDisable = true;\r\n                copyState.red = true;\r\n                copyState.resetDisable = false\r\n            }\r\n            return copyState\r\n        }\r\n        case RESET: {\r\n            return {...state, red: false, currentValue: state.startValue, incDisable: false, resetDisable: true}\r\n        }\r\n        case CHANGE_START_VALUE: {\r\n            let copyState = {...state}\r\n            copyState.incDisable = true;\r\n            copyState.resetDisable = true;\r\n            copyState.startValue = action.newStartValue;\r\n            if (action.newStartValue < 0) {\r\n                copyState.error = true;\r\n                copyState.setDisable = true\r\n            } else if (action.newStartValue >= copyState.maxValue) {\r\n                copyState.error = true;\r\n                copyState.setDisable = true\r\n            } else {\r\n                copyState.error = false;\r\n                copyState.setDisable = false\r\n            }\r\n            return copyState\r\n        }\r\n        case CHANGE_MAX_VALUE: {\r\n            let copyState = {...state}\r\n            copyState.maxValue = action.newMaxValue;\r\n            copyState.incDisable = true;\r\n            copyState.resetDisable = true;\r\n            if (action.newMaxValue < 0 || action.newMaxValue <= copyState.startValue) {\r\n                copyState.error = true;\r\n                copyState.setDisable = true\r\n            } else {\r\n                copyState.error = false;\r\n                copyState.setDisable = false\r\n            }\r\n            return copyState\r\n        }\r\n        case SET: {\r\n            return {\r\n                ...state,\r\n                red: false,\r\n                currentValue: state.startValue,\r\n                incDisable: false,\r\n                setDisable: true,\r\n                resetDisable: true\r\n            }\r\n        }\r\n        case \"SET_VALUE\": {\r\n            return {...state, startValue: action.min, currentValue: action.min, maxValue: action.max}\r\n        }\r\n        case \"IS_FETCHING\": {\r\n            return {...state, isFetching: action.is}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const incrementAC = (): incValueType => ({type: INCREMENT})\r\nexport const resetAC = (): resetValueType => ({type: RESET})\r\nexport const changeStartValueAC = (newValue: number): changeStartValueActionType => ({\r\n    type: CHANGE_START_VALUE,\r\n    newStartValue: newValue\r\n})\r\nexport const changeMaxValueAC = (newValue: number): changeMaxValueActionType => ({\r\n    type: CHANGE_MAX_VALUE,\r\n    newMaxValue: newValue\r\n})\r\nexport const setValueAC = (): setAllValue => ({type: SET})\r\nexport const setValueAC2 = (min: number, max: number): setValue => ({type: \"SET_VALUE\", min, max})\r\nexport const isFetchingAC = (value: boolean): isFetchingType => ({type: \"IS_FETCHING\", is: value})\r\n\r\nexport const incValueTC = () => (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    dispatch(incrementAC())\r\n}\r\nexport const setValueTC2 = () => (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    let max = localStorage.getItem('max')\r\n    let min = localStorage.getItem('min')\r\n    let maxValue = 0;\r\n    let startValue = 0;\r\n    if (max) {\r\n        maxValue = JSON.parse(max)\r\n    }\r\n    if (min) {\r\n        startValue = JSON.parse(min)\r\n    }\r\n    dispatch(setValueAC2(startValue, maxValue))\r\n}\r\n\r\nexport const setValueTC = () => (dispatch: Dispatch, getState: () => AppStateType) => {\r\n    localStorage.setItem('max', JSON.stringify(getState().counter.maxValue))\r\n    localStorage.setItem('min', JSON.stringify(getState().counter.startValue))\r\n    dispatch(setValueAC())\r\n}\r\n","import React from 'react';\r\nimport './Counter.css'\r\nimport Button from \"../Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/state\";\r\nimport { incValueTC, initStateType, resetAC} from \"../../redux/reducers/counterReducer\";\r\n\r\nconst Counter = () => {\r\n\r\n    const state = useSelector<AppStateType, initStateType>(state=>state.counter)\r\n    const dispatch = useDispatch()\r\n    const increment = ()=>{\r\n        dispatch(incValueTC())\r\n    }\r\n    const reset =()=>{\r\n        dispatch(resetAC())\r\n    }\r\n    return (\r\n        <div className={'counter'}>\r\n            <div className={'counterView'}>\r\n                <span className={state.red? 'red':'count'}>{state.maxValue <= state.startValue || (state.maxValue < 0 || state.startValue < 0)\r\n                    ? 'Error'\r\n                    :state.currentValue\r\n                }</span>\r\n            </div>\r\n            <div className={'buttonsBlock'}>\r\n                <Button nameButton={'inc'} disabled={state.incDisable} callBack={()=>increment()}/>\r\n                <Button nameButton={'reset'} disabled={state.resetDisable} callBack={()=>reset()}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;\r\n","import React, {ChangeEvent, useEffect} from 'react';\r\nimport './Settings.css'\r\nimport Button from \"../Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/state\";\r\nimport {\r\n    changeMaxValueAC,\r\n    changeStartValueAC,\r\n    initStateType,\r\n    setValueTC, setValueTC2\r\n} from \"../../redux/reducers/counterReducer\";\r\n\r\nconst SettingsOfCounter = () => {\r\n\r\n    const state = useSelector<AppStateType,initStateType>(state => state.counter)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch(setValueTC2())\r\n    }, [dispatch])\r\n\r\n\r\n    const changeHandlerMax = (e:ChangeEvent<HTMLInputElement>)=>{\r\n       dispatch(changeMaxValueAC(e.currentTarget.valueAsNumber))\r\n    }\r\n    const changeHandlerMin = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        dispatch(changeStartValueAC(e.currentTarget.valueAsNumber))\r\n    }\r\n    const onClickHandler = ()=>{\r\n        dispatch(setValueTC())\r\n    }\r\n\r\n    return (\r\n        <div className={'settings'}>\r\n            <div className={'settingView'}>\r\n                <div className={'set'}>\r\n                    <span className={'span'}>max</span>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={state.maxValue}\r\n                        onChange={changeHandlerMax}\r\n                        className={state.error? 'error':\"\"}\r\n                    />\r\n                </div>\r\n                <div className={'set'}>\r\n                    <span className={'span'}>min</span>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={state.startValue}\r\n                        onChange={changeHandlerMin}\r\n                        className={state.error? 'error':''}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={'settingsButtons'}>\r\n                <Button nameButton={'set'} disabled={state.setDisable} callBack={()=>onClickHandler()}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SettingsOfCounter;\r\n","import React, {useEffect} from 'react';\nimport './App.css'\nimport Counter from \"./Components/Counter/Counter\";\nimport SettingsOfCounter from \"./Components/Settings/SettingsOfCounter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/state\";\nimport {isFetchingAC} from \"./redux/reducers/counterReducer\";\n\nconst App = () => {\n    const isFetching = useSelector<AppStateType, boolean>(state => state.counter.isFetching)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        setTimeout(() => dispatch(isFetchingAC(false)), 1000)\n    }, [dispatch])\n    return (\n        <div>\n            {isFetching\n                ? <div className={'app-wrapper'}><img src=\"https://c.tenor.com/I6kN-6X7nhAAAAAj/loading-buffering.gif\"\n                                                      alt=\"\"/></div>\n                : <div className={'app-wrapper'}><Counter/><SettingsOfCounter/></div>\n            }\n        </div>\n    );\n};\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport {counterReducer} from \"./reducers/counterReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    counter:counterReducer\r\n})\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport App from \"./App\";\nimport store from './redux/state';\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}